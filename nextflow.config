params {

    // input output options
    input               = null
    outdir              = null
    publish_dir_mode    = "copy"

    // resources max
    max_cpus            = 16
    max_memory          = '200.GB'
    max_time            = '36.h'

    // skip options
    skip_fetch_data     = false
    skip_rna_preprocess = false
    skip_star_genome    = false
    skip_make_ref       = true

    // reference
    meta                = "mm10"
    spatial_barcodes    = null
    ref_map             = null
    ref_annotation      = null
    ref_atac_genome     = null
    ref_cratac          = null

    // ATACseq cutadapt sequence 
    primer_seq          = "CAAGCGTTGGCTTCTCGCATCT"
    linker1_seq         = "GTGGCCGATGTTTCGCATCGGCGTACGACT"
    linker2_seq         = "ATCCACGTGCTTGAGAGGCCAGAGCATTCG"

    // STAR aligner
    genome_fasta        = "${projectDir}/data/references/Mus_musculus/Ensembl/GRCm38/Sequence/Chromosomes/"
    whole_genome_fasta  = "${projectDir}/data/references/Mus_musculus/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.fa"

}

profiles {

    singularity {
        singularity.enabled = true
        docker.enabled      = false
        conda.enabled       = false
    }

    docker {
        singularity.enabled = false
        docker.enabled      = true
        conda.enabled       = false
    }

    conda {
        singularity.enabled = false
        docker.enabled      = false
        conda.enabled       = true
    }

    test         { includeConfig 'conf/test.config' }
    test_full    { includeConfig 'conf/test_full.config' }
}

includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}